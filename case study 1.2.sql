---Case Study 1
create database morningsession_day1

use morningsession_day1

--flat file - data contained in a single table (columns, rows)
--CSV file- Comma separated values

-----tables
select * from fact
select * from location
select * from product

--Tasks to be performed:
--1. Display the number of states present in the LocationTable.
select count(state) as Number_of_states from location
---distinct
select count(distinct state) as Number_of_states from location

--2. How many products are of regular type?
select * from product
select COUNT(*) as No_of_regular_products from product where type = 'regular'

--3. How much spending has been done on marketing of product ID 1?
select * from fact

select ProductId, sum(marketing) as total_marketing from fact where ProductId = 1 group by ProductId

---ERROR -Operand data type nvarchar is invalid for sum operator.
--SOLUTION - change the datatype of Nvarchar to INT
Alter table fact
alter column Marketing int

--nvarchar - allows the unicode characters - all the regional languages like - hindi, kannada, french, UK english, nepali

--4. What is the minimum sales of a product?
select min(sales) as Minimum_sales from fact

--5. Display the max Cost of Good Sold (COGS).
select * from fact
select max(cogs) as Maximum_COGS from fact

--6. Display the details of the product where product type is coffee.
select * from product

select * from product where product_type = 'coffee'

--7. Display the details where total expenses are greater than 40.
select * from fact
select * from fact where Total_expenses > 40 order by total_expenses


-- 8. What is the average sales in area code 719?
select area_code,avg(sales) as Average_sales from fact where Area_Code = 719 group by area_code

--9. Find out the total profit generated by Colorado state
select * from fact
select * from location

---DID YOU KNOW?
--JOINs - used to combine data from multiple tables
--OPERATORS - used to combine results of multiple SELECT QUERIES

select L.state, sum(F.profit) as profit_of_Colorado 
from fact as F
inner join Location as L
on F.Area_Code = L.Area_Code
where L.State = 'Colorado' 
group by L.state

--10. Display the average inventory for each product ID.
select productID, avg(inventory) as Average_inventory from fact group by productID order by productID

--11. Display state in a sequential order in a Location Table. 
select distinct state from location order by state desc

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
select productID, avg(budget_margin) as Average_margin from fact group by productID having avg(budget_margin) > 100 order by productID

-- 13. What is the total sales done on date 2010-01-01?
select Date, sum(sales) as Total_sales from fact where Date = '2010-01-01' group by date

select * from fact
--14. Display the average total expense of each product ID on an individual date
select productID,Date ,avg(total_expenses) as Average_expenses from fact group by productID, date order by productID


--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
select F.date, F.productID, P.product_type, P.product, F.Sales, F.profit,L.State, F.Area_code
from Fact as F
inner join Product as P
on F.ProductId = P.ProductId
inner join Location as L
on F.Area_Code = L.Area_Code

--16. Display the rank without any gap to show the sales wise rank. 
--RANK - with skip
--DENSE_RANK - without skip

select * from fact
select *, DENSE_RANK() over(order by sales DESC) as RANK_AS_PER_SALES from fact

--17. Find the state wise profit and sales. 
select L.state , sum(F.profit) as TOTAL_PROFIT, sum(F.sales) as TOTAL_SALES
from fact as F
inner join Location as L
on F.Area_Code = L.Area_Code
group by L.State


--18. Find the state wise profit and sales along with the productname.
select p.product, l.state,sum(f.profit) as total_profit ,sum(f.sales) as total_sales
from fact as f
inner join location as l
on f.area_code = l.Area_Code
inner join product as p
on f.productid = p.productid
group by l.state, p.Product


--19. If there is an increase in sales of 5%, calculate the increasedsales. 
select sales, (sales * 1.05) as increased_sales from fact
--
select sales, (sales * 0.05) as sales_increase from fact

--SUBQUERY - a query within the query
--20. Find the maximum profit along with the product ID and producttype
select F.productID, P.Product_Type, f.profit from fact as F
inner join Product as P
on F.ProductId = P.ProductId
where F.Profit = (select max(Profit) from fact)

--21. Create a stored procedure to fetch the result according to the product typefrom Product Table. 
create procedure type_of_product
@prod_type varchar(20)
as
select * from product where Product_Type = @prod_type

exec type_of_product @prod_type = 'tea'

--22. Write a query by creating a condition in which if the total expenses is lessthan60 then it is a profit or else loss. 
select * from fact

select total_expenses, IIF(total_expenses < 60 , 'PROFIT', 'LOSS') as STATUS from fact
---IIF(conditional_statement,'true','false')


--23. Give the total weekly sales value with the date and product IDdetails. Useroll-up to pull the data in hierarchical order. 
--roll-up??
select date, productid, sum(sales) as total_sales from fact
group by date, ProductId

select date, productid, sum(sales) as total_sales from fact
group by date, ProductId with rollup



--24. Apply union and intersection operator on the tables which consist of attribute area code. 
select Area_Code from fact
union
select Area_Code from Location

select Area_Code from fact
intersect
select Area_Code from Location

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
create function get_product(@prod_type varchar(20))
returns table
as
return select * from Product where Product_Type = @prod_type

select * from dbo.get_product('Tea')

--26. Change the product type from coffee to tea where product ID is 1 and undo it. 
begin transaction
update Product
set Product_Type = 'Tea'
where ProductId = 1

rollback transaction

select * from Product
